trigger: # branch to trigger pipeline
  branches:
    include:
      - staging
  paths: 
    exclude:
      - deployments/azure-pipelines/ci-pipeline.yml 
      
schedules:
  - cron: "0 5 * * 0" # cron syntax defining a schedule
    displayName: Weekly early Sunday morning build 
    branches:
      include:
        - staging
    always: false 
    # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.

resources:
- repo: self

variables:
  # Project specific variables  
  - name: namespace
    value: 'something-ns'                    # to edit    
  - name: imageRepository 
    value: 'node-grpc-boiler'                 # to edit
  - name: targetPort
    value: 6666                                 # to edit
  - name: variableGroupName # get variables from key vault
    value: 'secret-variables'                  # to edit
  - name: pipelineEnvironmentName
    value: 'some-staging'                       # to edit  
  - name: buildNamespace
    value: 'some-staging-ns'
  - name: vmImageName 
    value: 'ubuntu-20.04'  
  - name: azureContainerRegistry 
    value: 'test.azurecr.io'
  - name: tag 
    value: '$(Build.BuildId)'  
  - name: azureResourceGroup
    value: 'test-aks'
  - name: kubernetesCluster
    value: 'test-akscluster'
  - name: azureServiceConnection
    value: 'azureServiceConnection'    

stages:  
  - stage: Test
    displayName: Run test suites    
    jobs:
    - job: Test
      displayName: Test
      pool:
        vmImage: $(vmImageName)
      steps:      
      - task: NodeTool@0
        inputs:
          versionSpec: '14.x'
      - script: |
          echo 'Setting up test environment'
          sudo docker pull redis
          sudo docker run -p 6379:6379 redis &                        
          sudo systemctl restart mongod.service
          sudo systemctl status mongod.service              
          echo 'Run tests'
          npm install
          npm run coverage          
        displayName: 'Run API tests (MongoDB)'
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/jest-junit.xml'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '**/cobertura-coverage.xml'            
      - task: BuildQualityChecks@7
        inputs:
          checkCoverage: true
          coverageFailOption: 'fixed'
          coverageType: 'lines'
          coverageThreshold: '80'
          
  - stage: Build
    jobs:
    - job: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@1
        displayName: 'Docker: login ACR'
        inputs:
          command: login
          azureSubscriptionEndpoint: $(azureServiceConnection)
          azureContainerRegistry: $(azureContainerRegistry)      
      - task: Docker@2
        inputs:
          command: buildAndPush
          repository: $(imageRepository)
          tags: |
            $(tag)
            latest
      # copy out template yaml for apply later
      - task: CopyFiles@2 
        displayName: Copy template files for AKS
        inputs:
          contents: $(build.sourcesDirectory)/deployments/azure-pipelines/aks/*.*
          targetFolder: $(build.artifactStagingDirectory)      
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(build.artifactStagingDirectory)
          artifactName: drop
  
  - stage: Deploy_to_AKS
    jobs:
    - deployment: Deploy_to_AKS
      variables:
      - group: ${{ variables.variableGroupName }} 
      - name: kub-pod-instancecount
        value: 2
      - name: node-env              # to edit
        value: staging
      pool:
        vmImage: $(vmImageName)
      environment: $(pipelineEnvironmentName).$(buildNamespace)
      strategy:
        runOnce:
          deploy:
            steps:
            - script: |
                echo $(namepace)
                echo $(appinsights-connection-string)
              displayName: 'Show variable values for debugging'
            - task: qetza.replacetokens.replacetokens-task.replacetokens@3
              displayName: Replace tokens in **/*
              inputs:
                rootDirectory: $(Pipeline.Workspace)/drop/deployments/azure-pipelines/aks
                targetFiles: '*.yml'
                keepToken: true
                tokenPrefix: __
                tokenSuffix: __
            - task: Kubernetes@1
              displayName: Create namespace first
              inputs:
                connectionType: Azure Resource Manager
                azureSubscriptionEndpoint: $(azureServiceConnection)
                azureResourceGroup: $(azureResourceGroup)
                kubernetesCluster: $(kubernetesCluster)
                useClusterAdmin: true
                command: apply
                arguments: -f $(Pipeline.Workspace)/drop/deployments/azure-pipelines/aks/namespace.yml    
            - task: Kubernetes@1
              displayName: kubectl apply using arguments
              inputs:
                connectionType: Azure Resource Manager
                namespace: $(namespace)
                azureSubscriptionEndpoint: $(azureServiceConnection)
                azureResourceGroup: $(azureResourceGroup)
                kubernetesCluster: $(kubernetesCluster)
                useClusterAdmin: true
                command: apply
                arguments: -f $(Pipeline.Workspace)/drop/deployments/azure-pipelines/aks/
                # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/kubernetes?view=azure-devops#secrets
                secretName: db
                secretType: generic
                secretArguments: '--from-literal=APPINSIGHTS_CONNECTION_STRING=$(appinsights-connection-string)